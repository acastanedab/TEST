<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LabelBtnSearchParameter" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="LabelCode" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="LabelCodeParameter" xml:space="preserve">
    <value>Parameter code</value>
  </data>
  <data name="LabelCodeParameterValid" xml:space="preserve">
    <value>A valid code.</value>
  </data>
  <data name="LabelCodeSection" xml:space="preserve">
    <value>Code section</value>
  </data>
  <data name="LabelCodeValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="LabelDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="LabelDuplicateParameter" xml:space="preserve">
    <value>There is already a parameter value with the same code.</value>
  </data>
  <data name="LabelNoSections" xml:space="preserve">
    <value>There are no sections for this parameter.</value>
  </data>
  <data name="LabelParameter" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="LabelParameterNameValid" xml:space="preserve">
    <value>Enter a name.</value>
  </data>
  <data name="LabelParameterValid" xml:space="preserve">
    <value>Select a parameter from the search button.</value>
  </data>
  <data name="LabelParameterValueExistingInTableFormula" xml:space="preserve">
    <value>You can not override the value parameter or modify the code, because it is being used in the option formulas.</value>
  </data>
  <data name="LabelParameterValueExistingInTableParameterCombination" xml:space="preserve">
    <value>You can not override the value parameter, modify the code or change the values ​​of start - end (Parameter type value range), because it is being used in the choice of combinations.</value>
  </data>
  <data name="LabelParameterValueExistingInTableParameterCombinationFormula" xml:space="preserve">
    <value>You can not override the value parameter or modify the code, because it is being used in option schemes and formulas option.</value>
  </data>
  <data name="LabelRangeDataInvalid" xml:space="preserve">
    <value>The end of range value can not be less than the value of home</value>
  </data>
  <data name="LabelSection" xml:space="preserve">
    <value>Section</value>
  </data>
  <data name="LabelTitleEdit" xml:space="preserve">
    <value>Edit value</value>
  </data>
  <data name="LabelTitleNew" xml:space="preserve">
    <value>New value</value>
  </data>
  <data name="LabelTittleParameterValue" xml:space="preserve">
    <value>General parameter value</value>
  </data>
  <data name="LabelValidateParameter" xml:space="preserve">
    <value>Select parameter</value>
  </data>
  <data name="LabelValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="LabelValueValidate" xml:space="preserve">
    <value>Enter / the value (s)</value>
  </data>
</root>